type Event {
  id: ID!
  title: String!
  desc: String!
  date: String!
  from: String!
  to: String!
  location_id: ID!
  user_id: ID!
  user: User!
  location: Location!
  participants: [Participant]
}

input EventInput {
  title: String!
  desc: String!
  date: String!
  from: String!
  to: String!
  location_id: ID!
  user_id: ID!
}

type User {
  id: ID!
  username: String!
  email: String!
  events: [Event]
}

input UserInput {
  username: String!
  email: String!
}

type Location {
  id: ID!
  name: String!
  desc: String!
  lat: Float!
  lng: Float!
}

input LocationInput {
  name: String!
  desc: String!
  lat: Float!
  lng: Float!
}

type Participant {
  id: ID!
  user_id: ID!
  event_id: ID!
  user: User!
  event: Event!
}

input ParticipantInput {
  user_id: ID!
  event_id: ID!
}

type Query {
  events: [Event]
  event(id: ID!): Event
  users: [User]
  user(id: ID!): User
  locations: [Location]
  location(id: ID!): Location
  participants: [Participant]
  participant(id: ID!): Participant
}

type Mutation {
  addNewLocation(inputData: LocationInput!): Location
  createNewEvent(inputData: EventInput!): Event
  createNewUser(inputData: UserInput!): User
  assignParticipant(inputData: ParticipantInput!): Participant
  updateUser(id: ID!, inputData: UserInput!): User
  updateEvent(id: ID!, inputData: EventInput!): Event
  updateLocation(id: ID!, inputData: LocationInput!): Location
  deleteAllUsers: Int
  deleteAllLocations: Int
  deleteAllEvents: Int
  deleteAllParticipants: Int
  deleteAllData: String
  deleteUser(id: ID!): User
  deleteEvent(id: ID!): Event
  deleteLocation(id: ID!): Location
  deleteParticipant(id: ID!): Participant
}

type Subscription {
  userAdded: User!
  userUpdated: User!
  userDeleted: User!

  locationAdded: Location!
  locationUpdated: Location!
  locationDeleted: Location!

  eventAdded: Event!
  eventUpdated: Event!
  eventDeleted: Event!

  participantAdded: Participant!
  participantDeleted: Participant!
}
